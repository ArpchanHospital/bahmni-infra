name: Validate and Deploy to AWS

on:
  push:
    branches: [ main, BAH-1731 ]

jobs:
  terrascan:
    name: Terrascan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Terrascan
        run: brew install terrascan
      - name: Terrascan scan and validate
        run: ./terrascan/terrascan.sh
  
  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v1
      - name: TFLint
        run: ./tflint/tflint.sh
  tfsec:
    name: TFSec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install TFSec
        run: brew install tfsec
      - name: TFSec
        run: ./tfsec/tfsec.sh

  tfvalidate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Terraform Validate
        run: ./terraform/tf-validate.sh

  tfapply:
    name: Terraform Apply
    needs: [ terrascan, tflint, tfsec, tfvalidate ]
    if: ${{ (needs.terrascan.result == 'success') && (needs.tflint.result == 'success') && (needs.tfvalidate.result == 'success') && (needs.tfsec.result == 'success') }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.BAHMNI_AWS_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.BAHMNI_AWS_SECRET }}
      AWS_DEFAULT_REGION: ${{ secrets.BAHMNI_AWS_REGION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install eksctl
        run: brew install weaveworks/tap/eksctl
      - name: Provision shared resources
        run: |
          cd terraform/shared/
          terraform init -backend-config=../config.s3.tfbackend
          terraform apply -auto-approve
      - name: Provision resources for dev
        run: |
          cd terraform/environment/dev/
          terraform init -backend-config=../../config.s3.tfbackend
          terraform apply -auto-approve
          eksctl create iamidentitymapping --cluster $(terraform output -raw eks_cluster_name) --arn $(terraform output -raw user_aceess_role_arn) --group view --no-duplicate-arns

  slack-workflow-status:
    name: Notify on Slack
    if: ${{ always() }}
    needs: [ tfapply ]
    runs-on: ubuntu-latest
    env:
      STATUS: ${{ (needs.tfapply.result == 'success') && 'success' || 'failure' }}
    steps:
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.STATUS }}
          fields: message,author,workflow,repo 
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
